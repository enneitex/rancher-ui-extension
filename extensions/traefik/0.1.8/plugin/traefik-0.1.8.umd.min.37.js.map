{"version":3,"file":"traefik-0.1.8.umd.min.37.js","mappings":"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","sources":["webpack://traefik-0.1.8/./l10n/en-us.yaml"],"sourcesContent":["const doc = [({\"traefik\":({\"description\":\"Traefik resources manage HTTP, TCP, and UDP routing with advanced load balancing, middleware, and TLS termination capabilities.\", \"entryPoints\":({\"title\":\"EntryPoints\", \"noEntryPoints\":\"No entrypoint configured\"}), \"route\":\"Route\", \"configuration\":\"Configuration\", \"ingressRoute\":({\"description\":\"IngressRoute defines HTTP routing rules from external traffic to internal services based on host, path, and middleware configurations.\", \"ingressClass\":({\"label\":\"Ingress Class\", \"tab\":\"Ingress Class\", \"placeholder\":\"Select an ingress class\", \"description\":\"IngressClass specifies which ingress controller will handle this IngressRoute. If not specified, the default ingress controller will be used.\", \"tooltip\":\"The ingress class to use for this IngressRoute (optional). Controls which ingress controller will handle this resource.\", \"none\":\"None (use default)\", \"noIngressClasses\":\"No IngressClass resources found in the cluster. You may need to create an IngressClass first.\"}), \"entryPoints\":({\"label\":\"EntryPoints\", \"description\":\"Network EntryPoints where Traefik listens for incoming traffic\", \"websecure\":\"websecure (HTTPS - 443)\"}), \"routes\":({\"label\":\"Routes\", \"routeLabel\":\"Route {index}\", \"match\":({\"label\":\"Match Rule\", \"placeholder\":\"e.g. Host(`example.com`) && Path(`/api`)\", \"tooltip\":\"Traefik matching rules. See https://doc.traefik.io/traefik/routing/routers/#rules for examples.\", \"warningMultipleOr\":\"Your match rule contains OR operators (||). This may lead to unexpected behavior. Consider creating separate routes for better clarity and maintainability.\"}), \"service\":({\"label\":\"Target Service\", \"placeholder\":\"Select a service\", \"tooltip\":\"Kubernetes Service or TraefikService that will receive the matched traffic. TraefikService allows advanced load-balancing features.\"}), \"port\":({\"label\":\"Port\", \"placeholder\":\"e.g. 80 or http\", \"tooltip\":\"Service port number or named port\"})}), \"middleware\":({\"label\":\"Middleware\", \"noMiddlewaresAvailable\":\"No middleware available in this namespace\", \"name\":({\"label\":\"Middleware Name\", \"placeholder\":\"Select a middleware\", \"tooltip\":\"Namespace of the middleware resource\"})}), \"tls\":({\"label\":\"TLS Configuration\", \"certificate\":({\"title\":\"TLS Certificate\"}), \"configuration\":({\"title\":\"TLS Settings\"}), \"enabled\":\"TLS is enabled for this IngressRoute\", \"notConfigured\":\"TLS is not configured for this IngressRoute. Using default TLS settings.\", \"mode\":({\"enabled\":\"Enabled\", \"disabled\":\"Disabled\"}), \"validation\":({\"atLeastOne\":\"When TLS is enabled, at least one field must be configured\"}), \"secretName\":({\"label\":\"TLS Secret Name\", \"placeholder\":\"e.g. my-tls-secret\", \"tooltip\":\"Kubernetes secret containing TLS certificate and key\"}), \"certResolver\":({\"label\":\"Certificate Resolver\", \"placeholder\":\"e.g. letsencrypt\", \"tooltip\":\"Traefik certificate resolver for automatic TLS certificate generation\"}), \"domains\":({\"label\":\"Domains\", \"addDomain\":\"Add Domain\", \"main\":({\"label\":\"Main Domain\", \"placeholder\":\"e.g. example.com\"}), \"sans\":({\"label\":\"Subject Alternative Names\", \"placeholder\":\"e.g. www.example.com, api.example.com\", \"tooltip\":\"Additional domain names for the certificate\"})}), \"options\":({\"label\":\"TLS Options\", \"placeholder\":\"e.g. default\", \"tooltip\":\"Reference to TLSOption resource for advanced TLS configuration\"}), \"store\":({\"label\":\"TLS Store\", \"placeholder\":\"e.g. default\", \"tooltip\":\"Reference to TLSStore resource for certificate storage\"})}), \"validation\":({\"entryPointsRequired\":\"At least one entry point must be specified\"})}), \"ingressRouteTCP\":({\"description\":\"IngressRouteTCP defines TCP routing rules for non-HTTP traffic like databases, messaging systems, and other TCP services.\", \"entryPoints\":({\"label\":\"EntryPoints\", \"description\":\"TCP entryPoints where Traefik listens for incoming TCP traffic\", \"placeholder\":\"e.g. 31000, 31001\", \"tooltip\":\"Comma-separated list of TCP entryPoints configured in Traefik. Examples: 31000, 31001\"}), \"validation\":({\"entryPointsRequired\":\"At least one entryPoint must be specified\"}), \"route\":({\"label\":\"TCP Route\", \"match\":({\"label\":\"Match Rule\"}), \"service\":({\"label\":\"Service\"}), \"port\":({\"label\":\"Port\"})}), \"middleware\":({\"label\":\"MiddlewareTCP\", \"noMiddlewaresAvailable\":\"No middlewareTCP available in this namespace\"}), \"tls\":({\"enabled\":\"TLS is enabled for this IngressRouteTCP\", \"label\":\"TLS Configuration\", \"notConfigured\":\"TLS is not configured for this IngressRouteTCP. Using default TLS settings.\", \"passthrough\":({\"label\":\"Enable TLS Passthrough\", \"description\":\"TLS Passthrough is enabled, traffic is forwarded as-is to the backend service without terminating TLS at Traefik.\", \"tooltip\":\"When enabled, traffic is forwarded as-is to the backend service without terminating TLS at Traefik.\"})})}), \"middleware\":({\"description\":\"Middleware components that can transform requests and responses before they reach services.\", \"type\":({\"label\":\"Middleware Type\"}), \"types\":({\"label\":\"Type\", \"addPrefix\":({\"label\":\"Add Prefix\", \"description\":\"Updates the path of a request before forwarding it\"}), \"addHeaders\":({\"label\":\"Add Headers\", \"description\":\"Adds custom headers to requests\"}), \"basicAuth\":({\"label\":\"Basic Authentication\", \"description\":\"Restricts access to your services to known users\"}), \"buffering\":({\"label\":\"Buffering\", \"description\":\"Buffers the request/response\"}), \"chain\":({\"label\":\"Chain\", \"description\":\"Defines reusable combinations of other pieces of middleware\"}), \"circuitBreaker\":({\"label\":\"Circuit Breaker\", \"description\":\"Prevents calling unhealthy services\"}), \"compress\":({\"label\":\"Compression\", \"description\":\"Compresses responses before sending them to the client, using gzip, brotli, or zstd compression\"}), \"contentType\":({\"label\":\"Content Type\", \"description\":\"Handles Content-Type auto-detection\"}), \"digestAuth\":({\"label\":\"Digest Authentication\", \"description\":\"Adds Digest Authentication\"}), \"errors\":({\"label\":\"Error Pages\", \"description\":\"Returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes\"}), \"forwardAuth\":({\"label\":\"Forward Authentication\", \"description\":\"Delegates the request authentication to a Service\"}), \"grpcWeb\":({\"label\":\"gRPC-Web\", \"description\":\"gRPC-Web middleware configuration\"}), \"headers\":({\"label\":\"Headers\", \"description\":\"Manages the requests and responses headers\"}), \"inFlightReq\":({\"label\":\"In Flight Requests\", \"description\":\"Limits the number of simultaneous connections\"}), \"ipAllowList\":({\"label\":\"IP Allow List\", \"description\":\"Limits allowed requests based on the client IP\"}), \"ipWhiteList\":({\"label\":\"IP Whitelist\", \"description\":\"IP Whitelist middleware (deprecated, use ipAllowList)\"}), \"passTLSClientCert\":({\"label\":\"Pass TLS Client Cert\", \"description\":\"Passes TLS Client Certificate information\"}), \"plugin\":({\"label\":\"Plugin\", \"description\":\"Plugin middleware configuration\"}), \"rateLimit\":({\"label\":\"Rate Limiting\", \"description\":\"Ensures that services will receive a fair amount of requests, and allows one to define what fair is\"}), \"redirectRegex\":({\"label\":\"Redirect Regex\", \"description\":\"Redirects a request using regex matching and replacement\"}), \"redirectScheme\":({\"label\":\"Redirect Scheme\", \"description\":\"Redirects requests from a scheme/port to another\"}), \"replacePath\":({\"label\":\"Replace Path\", \"description\":\"Replaces the path of the request URL and store the original path in an X-Replaced-Path header\"}), \"replacePathRegex\":({\"label\":\"Replace Path Regex\", \"description\":\"Replaces the path of a URL using regex matching and replacement\"}), \"retry\":({\"label\":\"Retry\", \"description\":\"Reissues requests a given number of times to a backend server if that server does not reply\"}), \"stripPrefix\":({\"label\":\"Strip Prefix\", \"description\":\"Removes the specified prefixes from the URL path\"}), \"stripPrefixRegex\":({\"label\":\"Strip Prefix Regex\", \"description\":\"Removes the matching prefixes from the URL path\"})}), \"spec\":({\"label\":\"Configuration\"})}), \"tlsOption\":({\"description\":\"TLS Options define advanced TLS configurations including cipher suites, TLS versions, and client authentication.\", \"configuration\":({\"description\":\"TLS Options configuration grouped in themed cards for better readability. Each card shows relevant configuration options when available.\"}), \"tabs\":({\"configuration\":\"Configuration\", \"tlsVersions\":\"TLS Versions\", \"cipherSuites\":\"Cipher Suites\", \"clientAuth\":\"Client Authentication\", \"advanced\":\"Advanced Options\"}), \"tlsVersions\":({\"description\":\"Configure the supported TLS versions for secure connections. MinVersion sets the minimum acceptable TLS version, while MaxVersion sets the maximum.\"}), \"minVersion\":({\"label\":\"Minimum TLS Version\", \"tooltip\":\"Sets the minimum TLS version that will be accepted by the server. If not specified, default Traefik settings are used.\"}), \"maxVersion\":({\"label\":\"Maximum TLS Version\", \"tooltip\":\"Sets the maximum TLS version that will be accepted by the server. If not specified, default Traefik settings are used.\"}), \"cipherSuites\":({\"label\":\"Cipher Suites\", \"description\":\"Configure specific cipher suites and server preferences. Cipher suites define the cryptographic algorithms used for TLS connections.\", \"add\":\"Add Cipher Suite\", \"placeholder\":\"e.g. TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\", \"tooltip\":\"List of cipher suites to use. If empty, Go's default cipher suites are used. Each cipher suite must be a valid TLS cipher suite identifier.\"}), \"preferServerCipherSuites\":({\"label\":\"Prefer Server Cipher Suites\", \"tooltip\":\"When enabled, the server's cipher suite preferences are used instead of the client's preferences during TLS handshake.\"}), \"clientAuth\":({\"label\":\"Client Authentication\", \"description\":\"Configure TLS client certificate authentication policies. This defines how the server handles client certificates during the TLS handshake.\", \"type\":({\"label\":\"Authentication Type\", \"tooltip\":\"Defines the client authentication type to apply during TLS handshake.\"}), \"secrets\":({\"label\":\"Client CA Secret Names\", \"add\":\"Add Secret\", \"placeholder\":\"e.g. client-ca-secret\", \"tooltip\":\"Names of Kubernetes secrets containing certificate details for client authentication. Required when authentication type needs certificate verification.\"})}), \"advanced\":({\"description\":\"Advanced TLS configuration options including ALPN protocols, elliptic curve preferences, and session management.\"}), \"alpnProtocols\":({\"label\":\"ALPN Protocols\", \"add\":\"Add Protocol\", \"placeholder\":\"e.g. http/1.1, h2, h3\", \"tooltip\":\"List of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v3.5/https/tls/#alpn-protocols\"}), \"curvePreferences\":({\"label\":\"Curve Preferences\", \"add\":\"Add Curve\", \"placeholder\":\"e.g. CurveP256, CurveP384\", \"tooltip\":\"Defines the preferred elliptic curves used during ECDHE handshakes. More info: https://doc.traefik.io/traefik/v3.5/https/tls/#curve-preferences\"}), \"sniStrict\":({\"label\":\"SNI Strict Mode\", \"tooltip\":\"When enabled, Traefik only allows connections from clients that specify a server_name extension matching the configured domains.\"}), \"disableSessionTickets\":({\"label\":\"Disable Session Tickets\", \"tooltip\":\"Disables TLS session resumption via session tickets. When enabled, prevents the reuse of session tickets for subsequent connections.\"})}), \"headers\":({\"entryPoints\":\"EntryPoints\", \"routes\":\"Routes\", \"match\":\"Match Rules\"}), \"product\":({\"label\":\"Traefik\"})}), \"typeLabel\":({\"traefik.io.ingressroute\":\"IngressRoute\", \"traefik.io.ingressroutetcp\":\"IngressRouteTCP\", \"traefik.io.middleware\":\"Middleware\", \"traefik.io.tlsoption\":\"TLSOption\"})})];\nmodule.exports = doc.length <= 1 ? doc[0] : doc;"],"names":["doc","module","exports","length"],"sourceRoot":""}