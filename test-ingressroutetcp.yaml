---
# PostgreSQL IngressRouteTCP with TLS and middleware
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: postgres-route
  namespace: microservices
  labels:
    app: postgres
    environment: production
spec:
  entryPoints:
    - postgres
  routes:
    - match: HostSNI(`postgres.example.com`)
      services:
        - name: postgres-primary
          port: 5432
          weight: 100
      middlewares:
        - name: tcp-ipwhitelist
        - name: tcp-inflightconn

---
# MySQL IngressRouteTCP with multiple backends
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: mysql-cluster-route
  namespace: microservices
  labels:
    app: mysql
    environment: production
spec:
  entryPoints:
    - mysql
  routes:
    - match: HostSNI(`mysql.example.com`)
      services:
        - name: mysql-primary
          port: 3306
          weight: 70
        - name: mysql-secondary
          port: 3306
          weight: 30
      middlewares:
        - name: tcp-ratelimit

---
# Redis IngressRouteTCP with TLS passthrough
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: redis-secure-route
  namespace: microservices
  labels:
    app: redis
    security: high
spec:
  entryPoints:
    - redis-secure
  routes:
    - match: HostSNI(`redis.example.com`)
      services:
        - name: redis-master
          port: 6379
      middlewares:
        - name: tcp-prod-whitelist
        - name: tcp-combined-security
  tls:
    passthrough: true

---
# MongoDB IngressRouteTCP with TLS termination
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: mongodb-route
  namespace: microservices
  labels:
    app: mongodb
    environment: staging
spec:
  entryPoints:
    - mongodb
  routes:
    - match: HostSNI(`mongo.example.com`)
      services:
        - name: mongodb-primary
          port: 27017
      middlewares:
        - name: tcp-allowlist-specific
  tls:
    secretName: mongodb-tls-secret
    options:
      name: mongodb-tls-options
      namespace: microservices
    store:
      name: default
      namespace: microservices

---
# MQTT IngressRouteTCP for IoT
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: mqtt-iot-route
  namespace: microservices
  labels:
    app: mqtt
    type: iot
spec:
  entryPoints:
    - mqtt
    - mqtts
  routes:
    - match: HostSNI(`mqtt.iot.example.com`)
      services:
        - name: mqtt-broker
          port: 1883
      middlewares:
        - name: tcp-inflightconn

---
# Kafka IngressRouteTCP with multiple brokers
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: kafka-cluster-route
  namespace: microservices
  labels:
    app: kafka
    cluster: main
spec:
  entryPoints:
    - kafka
  routes:
    - match: HostSNI(`kafka.example.com`)
      services:
        - name: kafka-broker-1
          port: 9092
          weight: 33
        - name: kafka-broker-2
          port: 9092
          weight: 33
        - name: kafka-broker-3
          port: 9092
          weight: 34
      middlewares:
        - name: tcp-ratelimit
        - name: tcp-ipwhitelist

---
# SSH Gateway IngressRouteTCP
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: ssh-gateway-route
  namespace: microservices
  labels:
    app: ssh-gateway
    security: critical
spec:
  entryPoints:
    - ssh
  routes:
    - match: HostSNI(`ssh.example.com`)
      services:
        - name: ssh-gateway
          port: 22
      middlewares:
        - name: tcp-prod-whitelist
        - name: tcp-inflightconn
  tls:
    passthrough: true

---
# RabbitMQ IngressRouteTCP with management
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: rabbitmq-route
  namespace: microservices
  labels:
    app: rabbitmq
    component: messaging
spec:
  entryPoints:
    - amqp
  routes:
    - match: HostSNI(`rabbitmq.example.com`)
      services:
        - name: rabbitmq
          port: 5672
      middlewares:
        - name: tcp-combined-security

---
# Elasticsearch IngressRouteTCP
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: elasticsearch-route
  namespace: microservices
  labels:
    app: elasticsearch
    stack: elk
spec:
  entryPoints:
    - elasticsearch
  routes:
    - match: HostSNI(`es.example.com`)
      services:
        - name: elasticsearch-master
          port: 9300
      middlewares:
        - name: tcp-allowlist-specific
        - name: tcp-ratelimit
  tls:
    secretName: elasticsearch-tls
    domains:
      - main: es.example.com
        sans:
          - "*.es.example.com"

---
# Generic TCP Service with wildcard
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: generic-tcp-route
  namespace: microservices
  labels:
    type: generic
spec:
  entryPoints:
    - tcp-generic
  routes:
    - match: HostSNI(`*`)
      services:
        - name: tcp-echo-service
          port: 8080
      middlewares:
        - name: tcp-inflightconn